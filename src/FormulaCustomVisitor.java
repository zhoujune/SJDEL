package formula;

// This visitor extends the BaseVisitor that is automatically generated by ANTLR from our grammar (Formula.g4).
// This visitor will traverse a parse tree.
// Each of these callbacks, and each node in the parse tree, corrspond to a rule in our grammar.
// When this visitor visits a node, the corresponding callback is triggered.

public class FormulaCustomVisitor extends FormulaBaseVisitor<Formula> {

    @Override public Formula visitAtom(FormulaParser.AtomContext ctx) {
        return new AtomicFormula(ctx.getText());
    }

    @Override public Formula visitConjunction(FormulaParser.ConjunctionContext ctx) {
        Formula left = (Formula) visit(ctx.formula().get(0));
        Formula right = (Formula) visit(ctx.formula().get(1));
        return new ConjunctionFormula(left, right);
    }

    @Override public Formula visitParens(FormulaParser.ParensContext ctx) {
        return (Formula) visit(ctx.formula());
    }

    
    @Override public Formula visitOr(FormulaParser.OrContext ctx) {
        Formula left = (Formula) visit(ctx.formula().get(0));
        Formula right = (Formula) visit(ctx.formula().get(1));
        return new OrFormula(left, right);
    }
    
    @Override public Formula visitImplication(FormulaParser.ImplicationContext ctx) {
        Formula left = (Formula) visit(ctx.formula().get(0));
        Formula right = (Formula) visit(ctx.formula().get(1));
        return new ImplicationFormula(left, right);
    }

    @Override public Formula visitBox(FormulaParser.BoxContext ctx) {
        try {
            Formula name = (Formula) visit(ctx.formula());
            return new BoxFormula(name,ctx.getText().substring(1,2));
        } catch (Exception e) {

        }
        return new BoxFormula(new AtomicFormula(ctx.getText().substring(2,3)),ctx.getText().substring(1,2));
    }

    @Override public Formula visitDiamond(FormulaParser.DiamondContext ctx) {

        try {
            Formula name = (Formula) visit(ctx.formula());
            return new DiamondFormula(name,ctx.getText().substring(1,2));
        } catch (Exception e) {

        }
        return new DiamondFormula(new AtomicFormula(ctx.getText().substring(2,3)),ctx.getText().substring(1,2));
    }

    @Override public Formula visitNegation(FormulaParser.NegationContext ctx) {
        try {
            Formula name = (Formula) visit(ctx.formula());
            return new NegationFormula(name);
        } catch (Exception e) {

        }
        return new NegationFormula(new AtomicFormula(ctx.getText().substring(1)));
    }

}
